---
# NOTE: requires full_environment inventory or emulation thereof

# NOTE: while it would be easier to synchronize files directly from one server to another,
# i cannot seem to get the synchronize module to cooperate without asking for a password on the server.
# so instead, i go through the trouble of bringing the desired file to the control,
# then pushing it to the desired destination(s)

- name: stop app servers before restoring database
  hosts: app_not_prod
  become: true

  tasks:
    - name: stop application
      include: tasks/stop_app.yml

- name: deploy backup to other server(s)
  hosts: app_not_prod
  become: yes
  become_user: "{{ login_user }}" # TODO: needed?

  vars:
    backup_file: "{{ copy_backup_file }}"

  tasks:
    - name: copy backup file to server
      copy:
        src: "../db_backup/{{ backup_file }}"
        dest: "~/{{ backup_file }}"

    - name: set version-specific vars
      include_role:
        name: postgres
        tasks_from: set_vars
      vars:
        upgrading: false
        version_major: "{{ postgres_version_major }}"
        version_minor: "{{ postgres_version_minor }}"

    - name: add pg_hba entry for database
      include_role:
        name: postgres
        tasks_from: pg_hba_entry
      vars:
        type: "local"
        database: "{{ db_name }}"
        user: "{{ db_user }}"
        method: "md5"
        state: "present"

    - name: flush handlers so pg_hba changes take effect
      meta: flush_handlers

    - name: add pgpass entry for database
      include_role:
        name: postgres
        tasks_from: pgpass
      vars:
        admin_user: "{{ login_user }}"
        admin_group: "{{ login_group }}"
        database: "{{ db_name }}"
        user: "{{ db_user }}"
        password: "{{ db_pass }}"
        state: "present"

    - name: restore db from backup
      include_role:
        name: postgres
        tasks_from: restore_db
      vars:
        database: "{{ db_name }}"
        user: "{{ db_user }}"
        file: "{{ backup_file }}"

    # TODO: review - db update playbooks (as used in other projects) depend on such entries
    - name: remove pg_hba entry for database
      include_role:
        name: postgres
        tasks_from: pg_hba_entry
      vars:
        type: "local"
        database: "{{ db_name }}"
        user: "{{ db_user }}"
        method: "md5"
        state: "absent"

    - name: flush handlers so pg_hba changes take effect
      meta: flush_handlers

    # TODO: review - db update playbooks (as used in other projects) depend on such entries
    - name: remove pgpass entry for database
      include_role:
        name: postgres
        tasks_from: pgpass
      vars:
        admin_user: "{{ login_user }}"
        admin_group: "{{ login_group }}"
        database: "{{ db_name }}"
        user: "{{ db_user }}"
        password: "{{ db_pass }}"
        state: "absent"

    - name: remove the backup file from the server
      file:
        path: "{{ backup_file }}"
        state: absent

- name: start app servers after restoring database
  hosts: app_not_prod
  become: true

  tasks:
    - name: start application
      include: tasks/start_app.yml
